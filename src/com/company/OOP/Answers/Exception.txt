1.Q:Что для программы является исключительной ситуацией? Какие способы обработки ошибок в программах вы знаете?
  A:Исключительные ситуации в Java это ситуация когда программа встречается с нарушением в выполнении и
    "выбрасывает" исключения и ошибки.
     Согласно спецификации Java, не следует пытаться обрабатывать ошибки в собственной программе,
     поскольку они связаны с проблемами уровня JVM.

2.Q:Что такое исключение для Java-программы? Что значит “программа выбросила исключение”?
   Опишите ситуации, когда исключения выбрасываются виртуальной машиной(автоматически),
   и когда необходимо их выбрасывать вручную?
 A:Исключение – это проблема(ошибка) возникающая во время выполнения программы.
  Исключения могут возникать во многих случаях, например:
    -Пользователь ввел некорректные данные.
    -Файл, к которому обращается программа, не найден.
    -Сетевое соединение с сервером было утеряно во время передачи данных. И т.д.
    Все исключения в Java являются объектами. Поэтому они могут порождаться не только автоматически при возникновении
    исключительной ситуации, но и создаваться самим разработчиком.
    В Java есть пять ключевых слов для работы с исключениями:
    try – данное ключевое слово используется для отметки начала блока кода, который потенциально может привести к ошибке.
    catch – ключевое слово для отметки начала блока кода, предназначенного для перехвата и обработки исключений.
    finally – ключевое слово для отметки начала блока кода, которой является дополнительным.
    Этот блок помещается после последнего блока ‘catch’. Управление обычно передаётся в блок ‘finally’ в любом случае.
    throw – служит для генерации исключений.
    throws – ключевое слово, которое прописывается в сигнатуре метода, и обозначающее что метод потенциально может
    выбросить исключение с указанным типом.

3.Q:Приведите иерархию классов-исключений, делящую исключения на проверяемые и непроверяемые.
    В чем особенности проверяемых и непроверяемых исключений?
  A:Исключения делятся на несколько классов, но все они имеют общего предка — класс Throwable.
    Его потомками являются подклассы Exception и Error.
    Исключения (Exceptions) являются результатом проблем в программе, которые в принципе решаемые и предсказуемые.
    Например, произошло деление на ноль в целых числах.
    Ошибки (Errors) представляют собой более серьёзные проблемы, которые, согласно спецификации Java,
    не следует пытаться обрабатывать в собственной программе, поскольку они связаны с проблемами уровня JVM.
    Например, исключения такого рода возникают, если закончилась память, доступная виртуальной машине.
    Программа дополнительную память всё равно не сможет обеспечить для JVM.
    В Java все исключения делятся на два типа: контролируемые исключения (checked) и неконтролируемые исключения (unchecked),
    к которым относятся ошибки (Errors) и исключения времени выполнения (RuntimeExceptions, потомок класса Exception).
    Контролируемые исключения представляют собой ошибки, которые можно и нужно обрабатывать в программе,
    к этому типу относятся все потомки класса Exception (но не RuntimeException).

4.Q:Объясните работу оператора try-catch-finally. Когда данный оператор следует использовать?
    Сколько блоков catch может соответствовать одному блоку try?
    Можно ли вкладывать блоки try друг в друга, можно ли вложить блок try в catch или finally?
    Как происходит обработка исключений, выброшенных внутренним блоком try, если среди его блоков catch нет подходящего?
    Что называют стеком операторов try? Как работает блок try с ресурсами.
  A:Существует пять ключевых слов, используемых в исключениях: try, catch, throw, throws, finally.
    Порядок обработки исключений следующий.
    Операторы программы, которые вы хотите отслеживать, помещаются в блок try. Если исключение произошло,
    то оно создаётся и передаётся дальше. Ваш код может перехватить исключение при помощи блока catch и обработать его.
    Системные исключения автоматически передаются самой системой. Чтобы передать исключение вручную, используется throw.
    Любое исключение, созданное и передаваемое внутри метода, должно быть указано в его интерфейсе ключевым словом throws.
    Любой код, который следует выполнить обязательно после завершения блока try, помещается в блок finally
    Схематически код выглядит так:

    try {
        // блок кода, где отслеживаются ошибки
    }
    catch (тип_исключения_1 exceptionObject) {
        // обрабатываем ошибку
    }
    catch (тип_исключения_2 exceptionObject) {
        // обрабатываем ошибку
    }
    finally {
        // код, который нужно выполнить после завершения блока try
    }
    Фрагмент кода может содержать несколько проблемных мест. Например, кроме деления на ноль,
    возможна ошибка индексации массива. В таком случае вам нужно создать два или более операторов catch
    для каждого типа исключения. Причём они проверяются по порядку. Если исключение будет обнаружено у первого блока
    обработки, то он будет выполнен, а остальные проверки пропускаются и выполнение программы продолжается с места,
    который следует за блоком try/catch.
int catNumber;
        int zero;

        try { // мониторим код
            catNumber = 1; // у меня один кот
            zero = 0;
            int result = catNumber / zero;
            // Создадим массив из трёх котов
            String[] catNames = {"Васька", "Барсик", "Мурзик"};
            catNames[2] = "Рыжик";
            System.out.println( "Не увидите это сообщение!");
        } catch (ArithmeticException e) {
            System.out.println("Нельзя котов делить на ноль!");
        }
        catch (ArrayIndexOutOfBoundsException e) {
            System.out.println( "Ошибка: " );
        }
        System.out.println( "Жизнь продолжается");

    Операторы try могут быть вложенными. Если вложенный оператор try не имеет своего обработчика catch
    для определения исключения, то идёт поиск обработчика catch у внешнего блока try и т.д. Если подходящий catch
    не будет найден, то исключение обработает сама система (что никуда не годится).
    Блок try можно вкладывать в блок catch и можно вкладывать в блок finally.
   Операторы try могут быть вложенными. То есть оператор try может находиться внутри блока другого try.
   Всякий раз, когда управление попадает в блок try, контекст этого исключения заталкивается в стек.
   Если вложенный оператор try не имеет обработчика catch для определенного исключения,
   стек "раскручивается" и проверяются на соответствие обработчики catch следующего (внешнего) блока try.
   Это продолжается до тех пор, пока не будет найден подходящий оператор catch либо пока не будут проверены все
   уровни вложенных try. Если подходящий оператор catch не будет найден,
   то исключение обработает система времени выполнения Java.
   Оператор try-c-ресурсами реализует принцип автоматического управления ресурсами, целью которого является избежать,
   например, утечек памяти, в случаях когда ресурс по каким-то причинам не освобождается, если он больше не нужен.

5.Q:Укажите правило расположения блоков catch в зависимости от типов перехватываемых исключений.
    Может ли перехваченной исключение быть сгенерировано снова, и, если да, то как и
    кто в этом случае будет обрабатывать повторно сгенерированное исключение?
    Может ли блок catch выбрасывать иные исключения, и если да, то опишите ситуацию, когда это может быть необходимо.
  A:Блоки catch распологаются в порядке от более конкретных к более общим.
    перехваченное исключение может быть сгенерировано повторно.
    Исключение можно генерировать в блоке catch, создавая тем самым цепочку исключений.
    Обычно разработчики поступают так в том случае, если им надо изменить тип исключения.
    Если вы создаете подсистему, используемую другими программистами, имеет смысл генерировать такие исключения,
    которые дали бы возможность сразу определить, что ошибка возникла именно в ней. В качестве примера подобного
    исключения можно привести ServletException.
    Повторно сгенерированные исключения передаются на уровень выше.
    Блок catch может выбрасывать иные исключения(не обрабатываемые в блоке) они обрабатываются ступенью выше.


6.Q:Когда происходит вызов блока finally? Существуют ли ситуации, когда блок finally не будет вызван?
    Может ли блок finally выбрасывать исключений? Может ли блок finally выполнится дважды?
 A: Когда исключение передано, выполнение метода направляется по нелинейному пути. Это может стать источником проблем.
    Например, при входе метод открывает файл и закрывает при выходе. Чтобы закрытие файла не было пропущено
    из-за обработки исключения, был предложен механизм finally.
    Ключевое слово finally создаёт блок кода, который будет выполнен после завершения блока try/catch, но перед кодом,
    следующим за ним. Блок будет выполнен, независимо от того, передано исключение или нет.
    Оператор finally не обязателен, однако каждый оператор try требует наличия либо catch, либо finally.
    Код в блоке finally будет выполнен всегда.
    Ситуация где блок finally может быть не вызван:
    try {
        System.exit(0);
    } catch(Exception e) {
        e.printStackTrace();
    } finally { }
    Здесь finally недостижим, так как происходит системный выход из программы.
    Общими словами: когда jvm умирает, ей не до finally (отсюда можете придумать другие примеры как убить jvm
    и ответить на вопрос в заголовке).
    блок finally может выбрасывать исключения.
    Блок finally выполняется только один раз в цикле try-catch-finally.