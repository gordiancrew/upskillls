1)Q:Расскажите, что представляет собой регулярное выражение? Что такое метасимволы регулярного выражения?
    Какие вы знаете классы символов регулярных выражений? Что такое квантификаторы?
    Какие логические операторы регулярных выражений вы знаете? Что значит “якорь” для регулярного выражения?

  A:Регулярное выражение – это шаблон для поиска строки в тексте. В Java исходным представлением этого шаблона
    всегда является строка, то есть объект класса String. Однако не любая строка может быть скомпилирована
    в регулярное выражение, а только та, которая соответствует правилам написания регулярного выражения – синтаксису,
    определенному в спецификации языка.
    Для написания регулярного выражения используются буквенные и цифровые символы, а также метасимволы – символы,
    имеющие специальное значение в синтаксисе регулярных выражений. Например:
    String regex=”epam”;
    // шаблон строки ”epam”;
    String regex=”\\d{3}”;
    // шаблон строки из трех цифровых символов;
    Синтаксис регулярных выражений основан на использовании символов <([{\^-=$!|]})?*+.>,
    которые можно комбинировать с буквенными символами. В зависимости от роли их можно разделить на несколько групп:
    1. Метасимволы для поиска совпадений границ строк или текста
    Метасимвол	Назначение
    ^	начало строки
    $	конец строки
    \b	граница слова
    \B	не граница слова
    \A	начало ввода
    \G	конец предыдущего совпадения
    \Z	конец ввода
    \z	конец ввода

    2. Метасимволы для поиска символьных классов
    Метасимвол	Назначение
    \d	цифровой символ
    \D	нецифровой символ
    \s	символ пробела
    \S	непробельный символ
    \w	буквенно-цифровой символ или знак подчёркивания
    \W	любой символ, кроме буквенного, цифрового или знака подчёркивания
    .	любой символ

    3. Метасимволы для поиска символов редактирования текста
    Метасимвол	Назначение
    \t	символ табуляции
    \n	символ новой строки
    \r	символ возврата каретки
    \f	переход на новую страницу
    \u 0085	символ следующей строки
    \u 2028	символ разделения строк
    \u 2029	символ разделения абзацев

    4. Метасимволы для группировки символов
    Метасимвол	Назначение
    [абв]	любой из перечисленных (а,б, или в)
    [^абв]	любой, кроме перечисленных (не а,б, в)
    [a-zA-Z]	слияние диапазонов (латинские символы от a до z без учета регистра )
    [a-d[m-p]]	объединение символов (от a до d и от m до p)
    [a-z&&[def]]	пересечение символов (символы d,e,f)
    [a-z&&[^bc]]	вычитание символов (символы a, d-z)

    5. Метасимволы для обозначения количества символов – квантификаторы. Квантификатор всегда следует после символа или группы символов.
    Метасимвол	Назначение
    ?	один или отсутствует
    *	ноль или более раз
    +	один или более раз
    {n}	n раз
    {n,}	n раз и более
    {n,m}	не менее n раз и не более m раз

    У символов каретки ^ и доллара $ есть специальные значения в регулярных выражениях.
    Они называются «якоря» (anchors).
    Каретка ^ означает совпадение с началом текста, а доллар $ – с концом.

2)Q:Какие java-классы работают с регулярными выражениями? В каком пакете они расположены?
    Приведите пример анализа текста с помощью регулярного выражения и поясните код примера.

  A:Пакет java.util.regex в основном состоит из следующих трех классов:
    Класс Pattern — Объект Pattern представляет собой скомпилированное представление регулярного выражения.
    Класс Pattern не предоставляет общедоступных конструкторов. Чтобы создать шаблон, вы должны сначала вызвать
    один из его открытых статических методов compile () , который затем вернет объект Pattern.
    Эти методы принимают регулярное выражение в качестве первого аргумента.
    Класс Matcher — объект Matcher — это механизм, который интерпретирует шаблон и выполняет операции
    сопоставления с входной строкой. Как и класс Pattern, Matcher не определяет общедоступных конструкторов.
    Вы получаете объект Matcher, вызывая метод matcher () для объекта Pattern.
    PatternSyntaxException — Объект PatternSyntaxException является непроверенным исключением,
    которое указывает на синтаксическую ошибку в образце регулярного выражения.
    Пример:
    Pattern pattern=Pattern.compile("epam");
    Matcher m=pattern.matcher("epamyyyyyyyykkkkkepam");
    int countEpams=0;
    while(m.find()){
    countEpams++;
    }
3)Q:Что такое группы в регулярных выражениях? Как нумеруются группы? Что представляет собой группа номер 0(ноль)?
    Приведите пример с использованием групп регулярного выражения.

  A:Методы для работы с захватываемыми группами:
    Исходный код приложения RegexDemo включает вызов метода m.group().
    -Метод group() – один из нескольких методов класса Matcher, ориентированных на работу с захватываемыми группами:
    -Метод int groupCount() возвращает число захватываемых групп в шаблоне сопоставителя.
    Это количество не учитывает специальную захватываемую группу номер 0, соответствующую шаблону в целом.
    -Метод String group() возвращает символы предыдущего найденного совпадения. Чтобы сообщить об успешном
    поиске по пустой строке, этот метод возвращает пустую строку. Если сопоставитель еще не выполнял поиска или
    предыдущая операция поиска завершилась неудачей, генерируется исключение IllegalStateException.
    -Метод String group(int group) напоминает предыдущий метод, за исключением того, что возвращает символы
    предыдущего найденного совпадения, захваченные группой, номер которой задается параметром group.
    Обратите внимание, что group(0) эквивалентно group(). Если в шаблоне нет захватываемой группы с
    заданным номером, метод генерирует исключение IndexOutOfBoundsException. Если сопоставитель еще не выполнял
    поиска или предыдущая операция поиска завершилась неудачей, генерируется исключение IllegalStateException.
    -Метод String group(String name) возвращает символы предыдущего найденного совпадения, захваченные группой name.
    Если захватываемой группы name в шаблоне нет, генерируется исключение IllegalArgumentException.
    Если сопоставитель еще не выполнял поиска или предыдущая операция поиска завершилась неудачей,
    генерируется исключение IllegalStateException.
    Следующий пример демонстрирует использование методов groupCount() и group(int group):
    Pattern p = Pattern.compile("(.(.(.)))");
    Matcher m = p.matcher("abc");
    m.find();
    System.out.println(m.groupCount());
    for (int i = 0; i <= m.groupCount(); i++)
    System.out.println(i + ": " + m.group(i));
    Результаты выполнения:
    3
    0: abc
    1: abc
    2: bc
    3: c