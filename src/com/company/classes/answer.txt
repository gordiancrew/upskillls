1.Q:Опишите процедуру инициализации полей класса и полей экземпляра класса.
    Когда инициализируются поля класса, а когда – поля экземпляров класса.
    Какие значения присваиваются полям по умолчанию?
    Где еще в классе полям могут быть присвоены начальные значения?
  A:В Java поля (fields) могут принадлежать классу или объекту. Поля, принадлежащие классу,
    являются статическими, а поля, принадлежащие объекту, - нестатическими.
    Статические поля доступны без создания объекта класса. Соответственно инициализироваться статические и
    нестатические поля должны в разное время: одни до создания объекта класса, а другие после. Если поле объявлено,
    но не проинициализировано то компилятор выдаст ошибку.
    Существуют следующие методы инициализации полей:
    -Инициализация в месте объявления поля(поля класса, поля объекта):Применяется, если инициализация может быть
     произведена коротким выражением и доступен контекст, необходимый для ее проведения.
    -Инициализационный блок(поля класса, поля объекта):Применяется, если инициализационный код неудобно записывать
     одним выражением или же, например, нужна обработка проверяемых исключений. В случае объектов может применяться
     для инициализации полей объектов анонимных классов.
    -Конструктор класса:Применяется, если для инициализации нужны параметры конструктора.

2.Q:Дайте определение перегрузке методов. Как вы думаете, чем удобна перегрузка методов?
    Укажите, какие методы могут перегружаться, и какими методами они могут быть перегружены?
    Можно ли перегрузить методы в базовом и производном классах?
    Можно ли private метод базового класса перегрузить public методов производного?
    Можно ли перегрузить конструкторы, и можно ли при перегрузке конструкторов менять атрибуты доступа у конструкторов?
  A:В программе мы можем использовать методы с одним и тем же именем, но с разными типами и/или количеством параметров.
    Такой механизм называется перегрузкой методов (method overloading).
    Перегрузка методов удобна тем, что один и тот же метод можно использовать с разным количеством параметров и типом.
    В производном классе разрешается перегружать любые видимые методы. Перегрузка методов в базовом классе так же
    разрешена. Private метод базового класса нельзя перегрузить в public методе производного.
    Конструкторы перегружать можно. Атрибуты доступа при перегрузке менять можно.


3Q:Объясните, что такое раннее и позднее связывание? Перегрузка – это раннее или позднее связывание?
   Объясните правила, которым следует компилятор при разрешении перегрузки;
   в том числе, если методы перегружаются примитивными типами,
   между которыми возможно неявное приведение или ссылочными типами, состоящими в иерархической связи.
 A: Связывание означает наличие связи между ссылкой и кодом. Например, переменная, на которую вы ссылаетесь,
    привязана к коду, в котором она определена. Аналогично, вызываемый метод привязан к месту в коде, где он определен.
    Существует два типа связывания методов в языке Java: ранее связывание (его ещё называют статическим) и
    позднее (соответственно, динамическое) связывание. Вызов метода в Java означает, что этот метод привязывается к
    конкретному коду или в момент компиляции, или во время выполнения, при запуске программы и создании объектов.
     Фундаментальное различие между статическим и динамическим связыванием в Java состоит в том,
     что первое происходит рано, во время компиляции на основе типа ссылочной переменной, а второе – позднее,
     во время выполнения, с использованием конкретных объектов.
     Перегрузка метода это раннее связывание.
    При перегрузке метода примитивными типами целые числа диапазона int будут восприниматься компилятором как int, а не
    shot или byte. вещественные типы будут восприниматься как double. Для выполнения программы эти типы нужно приводить
    явно. в процессе определения метода, который нужно вызвать, типы могут только расширяться, но не сужаться.

4Q:Объясните, как вы понимаете, что такое неявная ссылка this?
   В каких методах эта ссылка присутствует, а в каких – нет, и почему?
 A:ключевое слово this требуется для того, чтобы метод мог сослаться на вызвавший его объект.
   Применяется слово this  в двух случаях:
   -Когда у переменной экземпляра класса и переменной метода/конструктора одинаковые имена;
   -Когда нужно вызвать конструктор одного типа (например, конструктор по умолчанию или параметризированный) из другого.
    Это еще называется явным вызовом конструктора.
   This не применяется в статических методахБ так как не на что ссылаться.

5Q:Что такое финальные поля, какие поля можно объявить со спецификатором final?
   Где можно инициализировать финальные поля?
 A:Модификатор final делает дальнейшее изменение объекта невозможным.
   Final применяется для классов, полей и методов.
   При инициализации final полей, дальше менять значение переменных нельзя. При этом не обязательно сразу
   задавать значение переменной, неизменным будет первое заданное значение. Final переменные это
   константы и именуются заглавными буквами.Инициализировать константы можно сразу при объявлении, в конструкторе,
   в блоке инициализации, в статическом блоке.

6Q:Что такое статические поля, статические финальные поля и статические методы.
   К чему имеют доступ статические методы? Можно ли перегрузить и переопределить статические методы?
   Наследуются ли статические методы?
 A:Static — модификатор, применяемый к полю, блоку, методу или внутреннему классу. Данный модификатор указывает
   на  привязку субъекта  к текущему классу.При обозначении переменной уровня класса мы указываем на то, что это
   значение относится к классу. Если этого не делать, то значение переменной будет привязываться к объекту,
   созданному по этому классу. При объявлении статических переменных ставится модификатор static.
   Статические финальные поля это неизменные поля, принадлежащие данному классу.
   Статические методы отличаются от обычных тем, что они также привязаны к классу, а не к объекту.
   Важным свойством статического метода является то, что он может обратиться только к статическим переменным/методам.
   Статические методы не подлежат переопределению в классах-потомках. Во время наследования происходит перекрытие
   родительского статического метода другим методом, который описан в классе-потомке.
   Перегружаться статические методы могут.
   Статические методы могут наследоваться.

7Q:Что такое логические и статические блоки инициализации?
   Сколько их может быть в классе, в каком порядке они могут быть размещены и в каком порядке вызываются?
 A:При описании класса могут быть использованы логические блоки. Логическим блоком называется код,
   заключенный в фигурные скобки и не принадлежащий ни одному методу текущего класса, например:
    { /* код */ }
   static { /* код */ }
   есть два типа блоков  - статический и нестатический;
   Логические блоки чаще всего используются в качестве инициализаторов полей, но могут содержать вызовы методов и
   обращения к полям текущего класса. При создании объекта класса они вызываются последовательно, в порядке размещения,
   вместе с инициализацией полей как простая последовательность операторов, и только после выполнения
   последнего блока будет вызван конструктор класса. Операции с полями класса внутри логического
   блока до явного объявления этого поля возможны только при использовании ссылки this, представляющую
   собой ссылку на текущий объект.
   Логический блок может быть объявлен со спецификатором static. В этом случае он вызывается только один
   раз в жизненном цикле приложения при создании объекта или при обращении к статическому методу (полю) данного класса.

8Q:Что представляют собой методы с переменным числом параметров,
   как передаются параметры в такие методы и что представляет собой такой параметр в методе?
   Как осуществляется выбор подходящего метода, при использовании перегрузки для методов с переменным числом параметров?
 A:Методы, способные принимать переменное количество аргументов  называют методами с переменным числом аргументов
   (другое название - методы переменной арности).
   В методах этого типа список параметров имеет не фиксированную, а переменную длину,
   что обеспечивает дополнительную гибкость, позволяя методам принимать произвольное число аргументов.
   Синтаксис переменного числа параметров обозначается при помощи типа переменной+ знак троеточие(...)+
   имя. например(String...v).В параметрах метода могут быть и другие типы входящего значения.
   Список параметров переменной длины всегда в аргументах метода указывается последним. Список параметров
   переменной длины в аргументах метода может применятся один раз. 


9Q:Чем является класс Object? Перечислите известные вам методы класса  Object, укажите их назначение.
 A:В Java есть специальный суперкласс Object и все классы являются его подклассами. Поэтому ссылочная переменная
   класса Object может ссылаться на объект любого другого класса. Так как массивы являются тоже классами,
   то переменная класса Object может ссылаться и на любой массив.
   У класса есть несколько важных методов:
   Object clone() - создаёт новый объект, не отличающий от клонируемого
   boolean equals(Object obj) - определяет, равен ли один объект другому
   void finalize() - вызывается перед удалением неиспользуемого объекта
   Class<?> getClass() - получает класс объекта во время выполнения
   int hashCode() - возвращает хеш-код, связанный с вызывающим объектом
   void notify() - возобновляет выполнение потока, который ожидает вызывающего объекта
   void notifyAll() - возобновляет выполнение всех потоков, которые ожидают вызывающего объекта
   String toString() - возвращает строку, описывающий объект
   void wait() - ожидает другого потока выполнения
   void wait(long millis) - ожидает другого потока выполнения
   void wait(long millis, int nanos) - ожидает другого потока выполнения
   Методы getClass(), notify(), notifyAll(), wait() являются финальными и их нельзя переопределять.

10Q:Что такое хэш-значение? Объясните, почему два разных объекта могут сгенерировать одинаковые хэш-коды?
  A:Хэш-функция, которая представлена в Java  методом hashCode(), возвращает числовое значение фиксированной
    длины для любого объекта. В случае с Java метод hashCode() возвращает для любого объекта 32-битное число типа int.
    Ситуация в которой два разных объекта генерируют одинаковый хэш-код называется коллизией и возможна из за
    ограничения диапазона значений хэш, и невозможности создать  алгоритма для обсолютной уникальности возвращаемого
    значения.

11Q:Что такое объект класса Class?
    Чем использование метода getClass() и последующего сравнения возвращенного значения с Type.class отличается
    от использования оператора instanceof?
  A:объекты класса Class это классы и интерфейсы.
    Оператор instanceof возращает булеан значение был ли обьект класса на который ссылается данная переменная
    создан на основе проверяемого класса, а getClass являются ли объекты принадлежащими одному классу.

12Q:Укажите правила переопределения методов equals(), hashCode() и toString().
  A:Так как HashMap и HashTable в Java полагаются на методы equals() и hashCode() для сравнения своих key и values,
    то Java предлагает следующие правила для переопределения этих методов:
    Рефлексивность: Объект должен равняться себе самому.
    Симметричность: если a.equals(b) возвращает true, то b.equals(a) должен тоже вернуть true.
    Транзитивность: если a.equals(b) возвращает true и b.equals(c) тоже возвращает true, то c.equals(a) тоже должен
    возвращать true.
    Согласованность: повторный вызов метода equals() должен возвращать одно и тоже значение до тех пор,
    пока какое-либо значение свойств объекта не будет изменено. То есть, если два объекта равны в Java,
    то они будут равны пока их свойства остаются неизменными.
    Сравнение null: объект должны быть проверен на null. Если объект равен null, то метод должен вернуть false,
    а не NullPointerException. Например, a.equals(null) должен вернуть false.
    Соглашение между equals и hashCode в Java:
    Если объекты равны по результатам выполнения метода equals, тогда их hashcode должны быть одинаковыми.
    Если объекты не равны по результатам выполнения метода equals, тогда их hashcode могут быть как одинаковыми,
    так и разными. Однако для повышения производительности, лучше, чтобы разные объекты возвращали разные коды.