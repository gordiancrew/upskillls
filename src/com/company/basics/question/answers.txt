1.QUESTION:Объясните, что имеется в виду, когда говорится: Java-язык программирования и Java-платформа.
  ANSWER:Java- это универсальный обьекто-ориентированный язык программирования,
    который широко используется для различных программ.Язык java можно использовать на любой платформе,
    если на ней установлена среда исполнения Java(Java Runtime Environment).
2.Q: Поясните, как связаны имя java-файла и классы, которые в этом файле объявляются.
  A:Имнена java-классов совпадают с именем файла  в котором этот класс обьявлен.
3.Q:Расшифруйте аббревиатуры JVM, JDK и JRE; покажите, где “они находятся” и что собой представляют.
  A:JVM-Java Virtual Machine-  виртуальная машина java. Основная часть исполняющей системы java(JRE).
    JVM выполняет запуск кода и предоставляет среду для выполнения этого кода.
    JDK- Java Development Kit- комплект разработчика приложений на языке java. Включает в себя компилятор java,
    стандартные библиотеки классов java, примеры, документацию, различные утилиты и исполнительную систему java.
    JRE-Java Runtime Environment — минимальная реализация виртуальной машины, необходимая для исполнения Java-приложений,
    без компилятора и других средств разработки. Состоит из виртуальной машины — Java Virtual Machine
    и библиотеки Java-классов.
4.Q:Объясните, как скомпилировать и запустить приложение из командной строки, а также зачем в переменных
    среды окружения прописывать пути к установленному jdk.
 A:Независимо от того, какую операционную систему вы используете, Linux, Mac или Windows,
   если на вашем компьютере установлен JDK (Java Development Kit), вы можете в консоли набрать следующие команды чтобы
   скомпилировать и запустить программу:
   -javac (или  javac.exe) и в качестве параметров указать имя файла.
   -java (или  java.exe) и в качестве параметров указать имя файла.
   В первом случае будет вызван компилятор javac.exe, а во втором случае — запускалка java.exe,
   которая стартует нашу программу. Эти файлы лежат в папке bin  вашего JDK.
5.Q:Перечислите атрибуты доступа, объясните их действие.
  A: Модификаторы доступа это ключевые слова, которые регулируют уровень доступа кразным частям кода.
    Существуют 4 модификатора:
    -private(ограничивает видимоcть данных и методов пределами одного класса).
    -default(он не пишится, а присваевается по умолчанию, он ограничевает видимость в пределах пакета,
     без классов наследников).
    -protect( ограничивает видимость в пределах пакета и также позволяет видеть классы-наследники).
    -public(это видимость для всех, части кода, помеченные public предназначены для конечного пользования).
6.Q:Что такое пакеты в java-программе, что представляют собой пакеты на диске?
    Каково соглашение по именованию пакетов? Как создать пакет?
  A:Пакеты это механизм, позволяющий организовать Java классы в пространстве имен.
    Файлы одного пакета могут храниться в разных папках.
    Имен пакетам присваиваются по принципу: первая часть имени должна состоять из перевернутого доменного имени
    разработчика класса.
    Пакет создается при помощи оператора package , написать имя пакета после package в первой строке каждого
    файла для этого пакета.
7.Q:Объясните, какие классы, интерфейсы, перечисления необходимо импортировать в вашу программу, как это сделать.
    Влияет ли импорт пакета на импорт классов и др., лежащего в подпакетах?
    Какой пакет в Java импортируется по умолчанию?
  A:Если в программе необходимо использование классов из  других пакетов в java есть оператор import.
    Благодаря нему на импортируемый класс можно ссылаться из данного класса используя только его имя.
    Оператор import служит для удобства, формально можно обойтись без него, но тогда нужно указывать
    полное имя класса с именем пакета. Оператор import следует сразу после оператора packayge.
    Пакет java.lang импортируется в класс по умолчанию.
8.Q:Объясните различия между терминами “объект” и “ссылка на объект”.
  A:Объект это экземпляр класса, так сказать житель класса, а ссылка на объект это переменная ,
    ссылающаяся на данный объект, так сказать адрес этого жителя на листике.
9.Q:Какие примитивные типы Java вы знаете, как создать переменные примитивных типов? Объясните процедуру,
    по которой переменные примитивных типов передаются в методы как параметры.
  A:В java есть 8 примитивных типов, которые делятся на 4 группы:
    -целы числа: byte, short, int, long.
    -числа с плавающей точкой(вещественные): float, double.
    -логические: boolean.
    -символьные: char.
    Для создания примитивной переменной нужно указать ее тип, затем имя и проинициализировать,
    используя знак"=" и указать начальное значение.
    Для того что бы  передать переменную в параметры медода, нужно в аргументах вызова метода указать значение
    типа, указанного в аргументах метода, либо имя переменной соответствующего типа.
10.Q:Каков размер примитивных типов, как размер примитивных типов зависит от разрядности платформы,
     что такое преобразование (приведение) типов и зачем оно необходимо? Какие примитивные типы не приводятся
     ни к какому другому типу.
   A:Размеры примитивных типов: byte-8bit; short-16bit; int-32bit; long-64bit; float-32bit; double-64bi;
     char-16bit; boolean-по разному, зависит от jvm, чаще всего-32bit
     Преобразование типов это перемещение значения одного типа в другой тип , это необходимо что б в программе
     было возможно взаимодействие между разными типами. Тип boolean не приводится не к одному из типов.
11.Q:Объясните, что такое явное и неявное приведение типов, приведите примеры, когда такое преобразование имеет место.
   A:Неявное приведение типов(расширение) это приведение типов с меньшей разрядностью к типу с большей. Такие
     преобразования происходят автоматически.
     Явное приведение(сужение) это привидение типов с большей разрядностью к типу с меньшей. При таком преобразовании
     необходимо в скобках указать тип данных к которому приводится значение. При приведении значения к типу, где
     максимальное значение данных меньше приводимого значения, результат будет непредсказуем, зависящим от расклада
     нолей и едениц в усеченном сегменте. Сужение применяется для уменьшения памяти программы.
12.Q:Что такое литералы в Java-программе, какую классификацию литералов вы знаете, как записываются литералы
     различных видов и типов в Java-программе?
   A:Литералы — это явно заданные значения в коде программы — константы определенного типа, которые находятся в коде
     в момент запуска.
     Все литералы — это примитивные значения (строки, числа, символы, булевы значения). Нельзя создать литерал-объект.
     Единственный литерал, связанный с объектом — это null.
     В соответствии с примитивами, литералы также делятся на разделы:
     -Числовые:
          a.Целочисленные;(Данный вид литералов — самый простой. Числа записываются в их стандартном виде
                           без указывающих символов и прочего.
                            В JDK 7 появилась возможность записи двоичных значений. Делается это с помощью
                           префикса 0b или 0B. Далее идет запись с использованием 0 и 1.
                            Числа в восьмеричной системе записываются с помощью ведущего 0. Допустимые цифры — от 0 до 7.
                           Запись 09 или 08 вызовет ошибку компиляции.
                            С десятичной системой счисления нет никаких проблем: числа указываются в привычном нам виде.
                           Единственное ограничение — число не может начинаться с 0, так как компилятор примет его
                           за восьмеричное.
                            Числа в шестнадцатеричной системе записываются с помощью префиксов 0x и 0X.
                           Допустимые цифры — от 0 до 15, где числа 10-15 обозначаются символами A-F соответственно).

          b.С плавающей точкой(Числа с плавающей точкой, или дробные числа, могут записываться двумя способами:
                                Первый — в качестве классической десятичной дроби: 3.14159 или 2.718281282459045.
                                Второй — в научном виде, то есть обычная десятичная дробь плюс суффикс в виде
                               символа е или Е и степени 10, на которую нужно умножить указанную дробь.
                               Например, 4.05E-13, это значит 4.05 * 10-13.);

     -Строковые(Строковые литералы — это набор символов, заключенных в двойные кавычки. Данный тип используется так же
                часто, как и числовые литералы. В строке также могут находится служебные символы, которые необходимо
                экранировать (так называемые escape-последовательности);

     -Символьные(Символьные литералы в Java представлены кодовой таблицей Unicode,
                 то есть каждый символ — 16-битовое значение. Для обозначения символа в коде его обособляют одинарными
                 кавычками.
                  По опыту использования бывают два вида символов:
                  -Те, что можно ввести с клавиатуры — обычные символы;
                  -Символы, которые просто так с клавиатуры не ввести (символы различных языков, фигуры и так далее).
                 Обычные символы можно указать в явном виде: ‘,’ или ‘@’.
                 Если символ служебный (например, перенос строки или табуляция), такой символ необходимо экранировать
                 обратным слешем.
                 Символы, которые нельзя просто так ввести с консоли, можно задать в их 16-битовом виде.
                 Для этого необходимо указать код символа с префиксом \u, например ‘\u00F7'.
                 Также символы можно указывать в восьмеричном стиле (трехзначный номер), добавив в начале
                 просто обратный слеш, например ‘\122’. На мой взгляд, гораздо легче использовать \u);
     -Логические(Самый простой литерал — это логический. Имеется всего 2 значения: false и true,
                 которые указываются явно без различных символов).
13.Q:Как осуществляется работа с типами при вычислении арифметически выражений в Java?
   A:При выполнении арифмитических операций итоговое значение  приводятся к одному типу:
     Если присутствует в выражении тип с плавающей точкой, то к нему, если только целочисленные типы то к
     большеразрядному типу из присутствующих в выражении.
14.Q:Что такое классы-оболочки, для чего они предназначены?
     Объясните, что значит: объект класса оболочки – константный объект.
   A:Класс оболочка это класс-аналог примитивных типов.
     У примитивов в Java есть множество преимуществ: они занимают мало памяти, за счет чего повышается эффективность
     работы программы, и четко разделены по диапазонам значений. Но у них есть и недостатки по сравнению с
     классами-обертками. Самый явный из которых- не имение методов. Поэтому при необходимости используются
     классы-обертки.
     Обьекты класса обертки константные - то есть не меняют свое значение.
15.Q:Объясните разницу между примитивными и ссылочными типами данных. Поясните существующие различия, при передаче
     параметров примитивных и ссылочных типов в методы. Объясните, как константные объекты ведут себя при передаче
     в метод.
   A:Основное отличие состоит в том, что примитивные переменные хранят фактические значения, в то время как
     ссылочные переменные хранят адреса объектов, на которые они ссылаются.
     При передачи параметров в метод, в случае с примитивными типами передается копия текущего значения переменной,
     при передачи ссылки на объект- передается копия данной ссылки. То есть объект остается нетронутым, но имеет уже
     не одну, а две ссылки на себя.
16.Q:Поясните, что такое автоупаковка и автораспаковка.
   A:Автоупаковка-это автоматическая инкапсуляция примитивного типа в эквивалентный ему класс-обёртку всякий раз,
     когда требуется объект данного типа.
     Autoboxing происходит:
     -При присвоении значения примитивного типа переменной соответствующего класса-обёртки.
     -При передаче примитивного типа в параметр метода, ожидающего соответствующий ему класс-обёртку.
     Автораспаковка-это преобразование класса-обёртки в соответствующий ему примитивный тип.
     Если при распаковке класс-обёртка был равен null, произойдет исключение java.lang.NullPointerException.
     Unboxing происходит:
     -При присвоении экземпляра класса-обёртки переменной соответствующего примитивного типа.
     -В выражениях, в которых один или оба аргумента являются экземплярами классов-обёрток (кроме операции == и !=).
     -При передаче объекта класса-обёртки в метод, ожидающий соответствующий примитивный тип.
17.Q:Перечислите известные вам арифметические, логические и битовые операторы, определите случаи их употребления.
     Что такое приоритет оператора, как определить, в какой последовательности будут выполняться операции в выражении,
     если несколько из них имеют одинаковый приоритет.
   A:    Арифметические операторы:
     +	Сложение (а также унарный плюс)
     -	Вычитание (а также унарный минус)
     *	Умножение
     /	Деление
     %	Деление по модулю
     Рассмотрим некоторые правила работы с арифметическими операторами:
     Выражения вычисляются слева направо, если не добавлены круглые скобки или одни операции имеют более высокий
     приоритет.
     Операции *, /, и % имеют более высокий приоритет чем + и -.
         Логические операторы:
     &	Логическое AND (И)
     &&	Сокращённое AND
     |	Логическое OR (ИЛИ)
     ||	Сокращённое OR
     ^	Логическое XOR (исключающее OR (ИЛИ))
     !	Логическое унарное NOT (НЕ)
     &=	AND с присваиванием
     |=	OR с присваиванием
     ^=	XOR с присваиванием
     ==	Равно
     !=	Не равно
     ?:	Тернарный (троичный) условный оператор
         Побитовые операторы:
     ~	Побитовый унарный оператор NOT
     &	Побитовый AND
     &=	Побитовый AND с присваиванием
     |	Побитовый OR
     |=	Побитовый OR с присваиванием
     ^	Побитовый исключающее OR
     ^=	Побитовый исключающее OR с присваиванием
     >>	Сдвиг вправо
     >>=	Сдвиг вправо с присваиванием
     >>>	Сдвиг вправо с заполнением нулями
     <<	Сдвиг влево
     <<=	Сдвиг влево с присваиванием
     >>>=	Сдвиг вправо с заполнением нулями с присваиванием
18.Q:Укажите правила выполнения операций с плавающий точкой в Java (согласно стандарту IEEE754).
     Как определить, что результатом вычисления стала бесконечность или нечисло?
   A:Целочисленное деление на 0 генерирует исключение, в то время как результатом деления на 0 чисел с
      плавающей точкой является бесконечность (или NaN в случае деления 0.0/0).Разработчики JVM, согласно
      стандарту IEEE 754 ввели также и значения Double.NEGATIVE_INFINITY и Double.POSITIVE_INFINITY,
      равные -1.0 / 0.0 и 1.0 / 0.0 соответственно.
19.Q:Что такое статический импорт, какие элементы можно импортировать при статическом импорте.
   A:Статический импорт позволяет использовать статические члены класса без использования полного
     имени класса по сравнению с обычными объявлениями импорта.
     Аккуратное и правильное использование import static улучшит читаемость вашего кода.
     Конструкция статического импорта позволяет получить прямой доступ к статическим членам
     без необходимости наследования от того типа, который содержит эти статические члены.
20.Q:Объясните работу операторов if, switch, while, do-while, for, for-each.
     Напишите корректные примеры работы этих операторов.
   A:Оператор if
     Оператор ветвления, проверяет некоторое условие и, в зависимости от результатов, выполняет определенный блок кода.
     В качестве условий могут использоваться любые операции возвращающие значение типа bool.
     if(flag)  // проверка истинности
     {
         // do something
     }
     Если при несоблюдении условия надо выполнить какой-то код, то к оператору if можно добавить блок else.

     if(flag)
     {
         // do something
     } else
     {
         // do something else
     }
 Оператор switch
     Оператор ветвления, более продвинутый, чем if, так как позволяет обрабатывать сразу несколько условий.
     После каждого блока case следует явный выход из swhith путем использования операторов break, goto или return.

     int i = ... //переменной i присваивается какое-то значение.
     switch(i) // проверка истинности
     {
         case 0:
             //do something
             break;
         case 1:
         case 2:
             //do something else
             return true;
             break;
         default:
             //do anything
             break;
     }
     Выражение сравнения switch(expr) может быть любым выражением, отличным от null.

 Оператор while:
    Оператор цикла, выполняет блок кода, пока условие принимает значение true. Перед каждым выполнением цикла,
    выражение while проверяется и может выполняться от нуля(то есть вообше не выполниться) до нескольких раз.
     while(flag) // проверка истинности
    {
        // do something
    }
    Цикл может быть прерван операторами break, return, throw или goto.

    while(сonditionIsTrue) // проверка истинности
    {
        // do something
        if (flag) return; // если условие true цикл прерывается
        // continue do something
    }
 Оператор do while
    Оператор цикла, в отличии от while проверка условия происходит после выполнения.
    То есть Оператор выполнится хотя бы один раз.

    do
    {
         //do something
    } while(condition);
    В любой точке блока do-while можно разорвать цикл с помошью оператора break.
    Оператор continue позволяет пропустить блок и перейти непосредственно к оператору while.
    Из цикла так же можно выйти с помощью return, throw или goto.
  Оператор for each
    Оператор цикла, который повторяет блок кода для каждого элемента из массива или коллекции,
    которые реализуют интерфейс IEnumerable или IEnumerator.
    Однако, его нельзя использовать для изменения массива или коллекции - для этого используется цикл for.

    int[] array = new int[] { ... }; //инициализация массива
    foreach (int element in array) //проход по каждому элементу
    {
        //do something with element
    }
    В любой момент в блоке foreach цикл можно прервать с помощью break, goto, return или throw,
    или перейти к следующей итерации с помощью continue.
 Оператор for
    Оператор цикла, выполняет блок кода, пока условие не примет значение false. В каждом операторе определяются секции инициализации, условия и итератора. Они все определяют, сколько раз цикл будет повторяться.

    for (initializer; condition; iterator)
    {
        //body
    }
    В инициализации задаются начальные условия перед циклом. В условии происходит проверка истинности выражения.
    В итераторе опеределяется, что происходит после каждой итерации. Цикл так же может быть прерван
    операторами break, return, throw или goto.

    for (int i = 0; i < value; iterator(), i++)
    {
        //do something
    }

    void iterator()
    {
        // do something too
    }
    Итератор, как и инициализация может содержать несколько выражений, разделенных запятыми, в данном случае выполнялся
    метод iterator() и значение переменной i инкрементировалось. Все секции в операторе for не являются обязательными.
    Следующий операторо создает бесконечный цикл.

    for ( ; ; )
    {
        //doing something infinitely
    }
21.Q:Объясните работу оператора instanceof.
     Что будет результатом работы оператора, если слева от него будет стоять ссылка, равная null?
   A:Оператор instanceof нужен, чтобы проверить, был ли объект, на который ссылается переменная X,
     создан на основе какого-либо класса Y.Большинство программ не нуждается в операторе instanceof,
     поскольку типы объектов обычно известны заранее. Но этот оператор может пригодиться при разработке
     обобщенных процедур, оперирующих объектами из сложной иерархии классов.
     Если мы применим оператор instanceof с любой переменной с нулевым значением, он вернет false.

