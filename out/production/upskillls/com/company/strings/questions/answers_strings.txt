1)Q:Как создать объект класса String, какие конструкторы класса String вы знаете? Что такое строковый литерал?
    Объясните, что значит “упрощенное создание объекта String”?
  A:Проще всего создать экземпляр класса String, присвоив ему значение строкового литерала:
    String a="My name is Vova.";
    Так же у класса String сть 11 конструкторов, которые позволяют:
    -создать объект, содержащий пустую строку.
    -создать копию строковой переменной.
    -создать строку на основе массива символов.
    -создать строку на основе массива байтов(с учетом кодировки).
    -и т.д.
    (String() — создается объект с пустой строкой;
    String(String str) — конструктор копирования: из одного объекта создается его точная копия, поэтому данный конструктор используется редко;
    String(StringBuffer str) — преобразованная копия объекта класса StringBuffer;
    String(StringBuilder str) — преобразованная копия объекта класса StringBuilder;
    String(byte[] byteArray) — объект создается из массива байтов byteArray;
    String(char[] charArray) — объект создается из массива charArray символов Unicode;
    String(byte[] byteArray, int offset, int count) — объект создается из части массива байтов byteArray, начинающейся с индекса offset и содержащей count байтов;
    String(char[] charArray, int offset, int count) — то же, но массив состоит из символов Unicode;
    String(int[] intArray, int offset, int count) — то же, но массив состоит из символов Unicode, записанных в массив целого типа, что позволяет использовать символы Unicode, занимающие больше двух байтов;
    String(byte[] byteArray, String encoding) — символы, записанные в массиве байтов, задаются в Unicode-строке с учетом кодировки encoding;
    String(byte[] byteArray, int offset, int count, String encoding) — то же самое, но только для части массива;
    String(byte[] byteArray, Charset charset) — символы, записанные в массиве байтов, задаются в Unicode-строке с учетом кодировки, заданной объектом charset;
    String(byte[] byteArray, int offset, int count, Charset charset) — то же самое, но только для части массива.)
    Литералы — это явно заданные значения в коде программы — константы определенного типа,
    которые находятся в коде в момент запуска.
    Строковые литералы — это набор символов, заключенных в двойные кавычки.
    Данный тип используется так же часто, как и числовые литералы. В строке также могут находится служебные символы,
    которые необходимо экранировать (так называемые escape-последовательности).

2)Q:Можно ли изменить состояние объекта типа String? Что происходит при попытке изменения состояния объекта типа String?
    Можно ли наследоваться от класса String? Как вы думаете, почему строковые объекты immutable?
  A:Класс string является неизменным(imutable)-созданный объект класса String не может быть изменен. При изменении
    объекта при помощи методов происходит создание и возврат новых строк.
    класс java.lang.string является финальным и не может быть наследованым.
    Immutable класса String дает ряд возможностей:
    -использование в многопоточных средах
    -использование String Pool
    -использование в качестве ключей в HashMap

3)Q:Объясните, что такое кодировка? Какие кодировки вы знаете? Как создать строки в различной кодировке?
  A:Кодировка это набор символов с соответствующим им набором кодов.
    -Однобайтовая кодировка-одна из самых ранних схем кодирования, называется ASCII, использует преобразование символов в
    семибитный код из двоичных чисел.
    -Многобайтовое кодирование-использование двух и более байт для кодирования символов , что позволяет преобразовать
    более обширнре количество букв и символов различных языков. BIG5 и SHIFT-JIS являются примерами схем многобайтового
    кодирования символов.
    -UNICODE-это общепринятая стандартная система кодирования, имеет емкость для каждого символа в мире.
    Схемы кодирования в unicode:
     -UTF-32 - это схема кодирования для Unicode, которая использует четыре байта для представления
      каждой кодовой точки , определенной Unicode. Очевидно, неэффективно использование четырех байтов для
      каждого символа.
     -UTF-8 - это другая схема кодирования для Unicode, которая использует переменную длину байтов для кодирования .
      Хотя он обычно использует один байт для кодирования символов, при необходимости он может использовать
      большее количество байтов, тем самым экономя пространство.
      В Java на основе строки можно создать массив байт в любой известной Java кодировке.

4)Q:Что такое пул литералов? Как строки заносятся в пул литералов? Как занести строку в пул литералов
    и как получить ссылку на строку, хранящуюся в пуле литералов?
    Где хранится(в каком типе памяти) пул литералов в Java 1.6 и Java 1.7?
  A:Для строк созданных при помощи оператора присваивания и строкового литерала в Java существует специальный
    механизм хранения в "отдельной" области памяти называемой строковый пул (string pool).
    Начиная с Oracle JDK 7, string pool хранится в общем heap'е.
    Для занесения строки в пул строк необходимо создать строку при помощи оператора"=" и присвоении
    строкового литерала переменной String. При уже существовании такой строки в пуле строк при обьявлении строки
    будет присвоена ссылка на этот литерал в пуле.
    Для того что бы занести в пул литералов строку созданную при помощи конструктора или вызвать строку из пула
    используется оператор intern();

5)Q:В чем отличие объектов классов StringBuilder и StringBuffer от объектов класса String?
    Какой из этих классов потокобезопасный? Как необходимо сравнивать на равенство объекты
    классов StringBuilder и StringBuffer и почему?
  A:Объекты String являются неизменяемыми, поэтому все операции, которые изменяют строки, фактически приводят к
    созданию новой строки, что сказывается на производительности приложения. Для решения этой проблемы,
    чтобы работа со строками проходила с меньшими издержками в Java были добавлены классы StringBuffer и StringBuilder.
    По сути они напоминает расширяемую строку, которую можно изменять без ущерба для производительности.
    Эти классы похожи, практически двойники, они имеют одинаковые конструкторы, одни и те же методы,
    которые одинаково используются. Единственное их различие состоит в том, что класс StringBuffer
    синхронизированный и потокобезопасный. То есть класс StringBuffer удобнее использовать в многопоточных приложениях,
    где объект данного класса может меняться в различных потоках. Если же речь о многопоточных приложениях не идет,
    то лучше использовать класс StringBuilder, который не потокобезопасный, но при этом работает быстрее,
    чем StringBuffer в однопоточных приложениях.

6)Q:Что такое Unicode?
  A:UNICODE-это общепринятая стандартная система кодирования, имеет емкость для каждого символа в мире.

7)Q:Какие методы класса String используются для работы с кодовыми точками?
    Как вы думаете, когда следует их использовать?
  A:Чтобы конвертировать Unicode в UTF-8 в Java, мы используем метод getBytes().
    Он кодирует строку в последовательность байтов и возвращает массив байтов.