1.Q:Что такое перечисления в Java. Как объявить перечисление? Чем являются элементы перечислений?
    Кто и когда создает экземпляры перечислений?
  A: Перечисления представляют набор логически связанных констант. Объявление перечисления происходит
    с помощью оператора enum, после которого идет название перечисления.
    Затем идет список элементов перечисления через запятую:
    enum days{
    SUNDAY,
    MONDAY,
    SATURDAY
    }
   Элементы перечислений это статически доступные экземпляры enum-класса.
   Экземпляры перечислений создает разработчик.

2.Q:Можно ли самостоятельно создать экземпляр перечисления? А ссылку типа перечисления?
    Как сравнить, что в двух переменных содержится один и тот же элемент перечисления и почему именно так?
  A:Самостоятельно создать экземпляр перечисления невозможно так как в классе enum не может быть public конструктора.
    Ссылку типа перечисления создать можноб она будет ссылаться на экземпляр перечисления. Что бы сравнить что в двух
    переменных содержится один и тот же элемент перечисления можно воспользоваться оператором"==" так как они ссылаются
    на один и тот же объект. Так же можно воспользоваться методом equalse().

3.Q:Что такое анонимные классы?
  A:Анонимные классы объявляются без указания в коде имени класса.
    Анонимные классы могут быть созданы:
    1) как реализация интерфейса:
    public interface C {
        void go();
    }

    public class Main {
        public static void main(String[] args) {
     C c1=new C(){
         @Override
         public void go() {
             System.out.println("go");
         }
     };
     c1.go();
        }
    }


    2) как наследник определённого класса:
    public class B {
        public void printHello() {
            System.out.println("HELLO");
        }
    }
    public class Main {
        public static void main(String[] args) {
            B b1 = new B() {
                @Override
                public void printHello() {
                    System.out.println("GOOD BUY");
                }
            };
        }
    }


4.Q:Что такое параметризованные классы? Для чего они необходимы?
    Приведите пример параметризованного класса и пример создания объекта параметризованного класса?
    Объясните, ссылки какого типа могут ссылаться на объекты параметризованных классов?
    Можно ли создать объект, параметризовав его примитивным типом данных?
  A:Обобщения - это параметризованные типы. С их помощью можно объявлять классы, интерфейсы и методы,
    где тип данных указан в виде параметра.
    Параметризированные типы обеспечивают типовую безопасность.
    Объявление generic-типа в виде, несмотря на возможность использовать любой тип в качестве параметра,
    ограничивает область применения разрабатываемого класса. Переменные такого типа могут вызывать только методы
    класса Object. Доступ к другим методам ограничивает компилятор,
    предупреждая возможные варианты возникновения ошибок.
    public class D<T> {

       public  D(){

       }
        public void printNew(T t){
            System.out.println(t.getClass());
            System.out.println(t.toString());

        }
    }

public class Main {
    public static void main(String[] args) {
     String q="q";
      D d1=new D();
      d1.printNew(q);

    }
}

  На объект параметризованного типа будут ссылаться ссылки  тип которых передан в аргументах.
  Параметризировать объект примитивными типами нельзя.